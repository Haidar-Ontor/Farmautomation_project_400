#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <DHT.h>

#include <Wire.h>

#include <LiquidCrystal_I2C.h>

// set the LCD number of columns and rows
int lcdColumns = 16;
int lcdRows = 2;

// set LCD address, number of columns and rows
// if you don't know your display address, run an I2C scanner sketch
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);

// WiFi credentials
 // const char* ssid = "Rx7700";
 // const char* password = "haider51";
 const char* ssid = "TOTOLINK_N300RT";
 const char* password = "bohubrihi";


// Server endpoints
const char* sensorDataUrl = "https://farmautomation400.site/sensor_data.php";
const char* controlCommandUrl = "https://farmautomation400.site/control.php";
const char* serverUrl = "https://farmautomation400.site/ping.php";
const char* controlUpdateUrl = "https://farmautomation400.site/update_control.php";

// Pin definitions
#define DHTPIN 32
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);


const int soilMoisturePin1 = 34;  // Soil moisture sensor 1
const int soilMoisturePin2 = 35;  // Soil moisture sensor 2
const int waterLevelPin1 = 33;    // Water level sensor 1
const int waterLevelPin2 = 39;    // Water level sensor 2 (ensure not conflicting with WiFi)
const int lightPin = 36;          // Move light sensor to ADC1 Pin (e.g., 36 or 39)

// Control pins field and pond
const int pumpF1Pin = 23;
const int pumpF2Pin = 19;
const int pumpF3Pin =13;
const int pumpPondPin = 18;  // Added pin for Pond Pump
// Control pin cattle
const int fanPin = 5;
const int lightControlPin = 4;
const int cattleGatePin = 12;

// Added pin definitions
const int C_lightPin = lightControlPin;
const int C_fanPin = fanPin;
const int C_pumpPin = pumpF1Pin;  // Assuming C_pumpPin maps to one of the pumps
const int C_gatePin = cattleGatePin;

const int device_id = 2;

void setup() {
  Serial.begin(115200);
  connectWiFi();

  // Initialize sensors
  dht.begin();

  // Initialize control pins
  pinMode(pumpF1Pin, OUTPUT);
  pinMode(pumpF2Pin, OUTPUT);
  pinMode(pumpF3Pin, OUTPUT);
  pinMode(pumpPondPin, OUTPUT);  // Initialize Pond Pump Pin
  pinMode(fanPin, OUTPUT);
  pinMode(lightControlPin, OUTPUT);
  pinMode(cattleGatePin, OUTPUT);  // Initialize Cattle Gate Pin

  //pinMode(soilMoisturePin1, INPUT);
  //pinMode(soilMoisturePin2, INPUT);
 // pinMode(waterLevelPin1, INPUT);
 // pinMode(waterLevelPin2, INPUT);
 // pinMode(lightPin, INPUT);






   Wire.begin(21, 22);  // Adjust to your ESP32's I2C pins
  lcd.init();
  lcd.backlight();

  // Connect to WiFi
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    sendSensorData();
    fetchControlCommands();
    sendPing();
    
  }
  delay(5000);  // Adjust the delay as needed
}

void sendSensorData() {
  // Read sensor data
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  int soilMoisture1 = analogRead(soilMoisturePin1);
  int soilMoisture2 = analogRead(soilMoisturePin2);
  int waterLevel1 = analogRead(waterLevelPin1);
  int waterLevel2 = analogRead(waterLevelPin2);
  int lightLevel = analogRead(lightPin);

  // Create JSON object
  DynamicJsonDocument jsonDoc(256);
  jsonDoc["C_Temp"] = temperature;
  jsonDoc["C_Humidity"] = humidity;
  jsonDoc["F1_SoilM"] = soilMoisture1;
  jsonDoc["F2_SoilM"] = soilMoisture2;
  jsonDoc["C_WaterL"] = waterLevel1;
  jsonDoc["Pond_Water_Level"] = waterLevel2;
  jsonDoc["C_Light"] = lightLevel;

  // Convert JSON object to string
  String jsonString;
  serializeJson(jsonDoc, jsonString);

  // Send data to server
  HTTPClient http;
  http.begin(sensorDataUrl);
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(jsonString);
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println(jsonString);
    Serial.print("Sensor data sent, response: ");
    Serial.println(response);

  } else {
    Serial.printf("Failed to send sensor data, error: %s\n", http.errorToString(httpResponseCode).c_str());
  }
  http.end();
}

void fetchControlCommands() {
  HTTPClient http;
  http.begin(controlCommandUrl);
  int httpResponseCode = http.GET();

  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.print("Control command response: ");
    Serial.println(response);

    DynamicJsonDocument jsonDoc(512);
    DeserializationError error = deserializeJson(jsonDoc, response);
    if (error) {
      Serial.printf("Failed to parse JSON, error: %s\n", error.c_str());
      return;
    }

    int FP_mode = jsonDoc["FP_mode"];
    int C_mode = jsonDoc["C_mode"];

    // Field and Ponds control based on FP_mode
    if (FP_mode == 1) {
      controlFPManualMode(jsonDoc);  // Manual control for FP
    } else {
      controlFPAutoMode();  // Auto control for FP
    }

    // Cattle house control based on C_mode
    if (C_mode == 1) {
      controlCManualMode(jsonDoc);  // Manual control for Cattle house
    } else {
      controlCAutoMode();  // Auto control for Cattle house
    }

  } else {
    Serial.printf("Failed to fetch control commands, error: %s\n", http.errorToString(httpResponseCode).c_str());
  }
  http.end();
}

void sendPing() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    // Convert serverUrl to String and concatenate parameters
    String url = String(serverUrl) + "?device_id=" + String(device_id) + "&action=ping";

    http.begin(url);
    int httpResponseCode = http.GET();

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Ping Response: " + response);

      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(response);
    } else {
      Serial.println("Error in HTTP request: " + String(httpResponseCode));
    }

    http.end();
  } else {
    Serial.println("Not connected to WiFi");
    connectWiFi();
  }
}

void connectWiFi() {
  // Start the WiFi connection
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");

     lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Connecting to WiFi");
  }
  Serial.println("Connected to WiFi");

   lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Connected to WiFi");
}

// Manual Control for Field and Ponds (FP)
void controlFPManualMode(DynamicJsonDocument& jsonDoc) {
  int pumpF1Status = jsonDoc["Pump_f1"];
  int pumpF2Status = jsonDoc["Pump_f2"];
  int pumpPondStatus = jsonDoc["Pump_Pond"];

  // Control devices based on received commands for Field and Ponds
  digitalWrite(pumpF1Pin, pumpF1Status == 1 ? HIGH : LOW);
  digitalWrite(pumpF2Pin, pumpF2Status == 1 ? HIGH : LOW);
  digitalWrite(pumpF3Pin, pumpPondStatus == 1 ? HIGH : LOW);

  Serial.println("FP Manual Mode: Pumps controlled based on manual commands.");

  
}

// Auto Control for Field and Ponds (FP)
void controlFPAutoMode() {
  // Fetch sensor trigger values from server
  HTTPClient http;
  http.begin("https://farmautomation400.site/fetch_sensor.php");
  int httpResponseCode = http.GET();

  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.print("FP Auto Control Trigger Response: ");
    Serial.println(response);

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(response);

    DynamicJsonDocument jsonDoc(1024);
    deserializeJson(jsonDoc, response);

    int soilMoisture1 = analogRead(soilMoisturePin1);
    int soilMoisture2 = analogRead(soilMoisturePin2);
    int waterLevel = analogRead(waterLevelPin1);

    // Loop through sensor data and apply control logic
    for (JsonObject sensor : jsonDoc.as<JsonArray>()) {
      const char* sensorName = sensor["sensor_name"];
      int minValue = sensor["min_value"];
      int maxValue = sensor["max_value"];

      if (strcmp(sensorName, "F1_SoilM") == 0) {
        if (soilMoisture1 < minValue) {
          digitalWrite(pumpF1Pin, HIGH);  // Turn on pump 1
        } else if (soilMoisture1 > maxValue) {
          digitalWrite(pumpF1Pin, LOW);  // Turn off pump 1
        }
      } else if (strcmp(sensorName, "F2_SoilM") == 0) {
        if (soilMoisture2 < minValue) {
          digitalWrite(pumpF2Pin, HIGH);  // Turn on pump 2
        } else if (soilMoisture2 > maxValue) {
          digitalWrite(pumpF2Pin, LOW);  // Turn off pump 2
        }
      } else if (strcmp(sensorName, "Pond_Water_Level") == 0) {
        if (waterLevel < minValue) {
          digitalWrite(pumpPondPin, HIGH);  // Turn on pond pump
        } else if (waterLevel > maxValue) {
          digitalWrite(pumpPondPin, LOW);  // Turn off pond pump
        }
      }
    }

    Serial.println("FP Auto Mode: Controls updated based on sensor readings.");
  } else {
    Serial.println("Error in fetching sensor triggers for FP Auto Mode.");
  }
sendControlStatus();
  http.end();
}

// Manual Control for Cattle House (C)
void controlCManualMode(DynamicJsonDocument& jsonDoc) {
  int lightStatus = jsonDoc["C_Light"];
  int fanStatus = jsonDoc["C_Fan"];
  int pumpStatus = jsonDoc["C_Pump"];
  int gateStatus = jsonDoc["C_Gate"];

  // Control devices based on received commands for Cattle House
  digitalWrite(C_lightPin, lightStatus == 1 ? HIGH : LOW);
  digitalWrite(C_fanPin, fanStatus == 1 ? HIGH : LOW);
  digitalWrite(C_pumpPin, pumpStatus == 1 ? HIGH : LOW);
  digitalWrite(C_gatePin, gateStatus == 1 ? HIGH : LOW);

  Serial.println("C Manual Mode: Controls updated based on manual commands.");
}

// Auto Control for Cattle House (C)
void controlCAutoMode() {
  // Fetch sensor trigger values from server
  HTTPClient http;
  http.begin("https://farmautomation400.site/fetch_sensor.php");
  int httpResponseCode = http.GET();

  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.print("C Auto Control Trigger Response: ");
    Serial.println(response);

 lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(response);

    DynamicJsonDocument jsonDoc(1024);
    deserializeJson(jsonDoc, response);

    // Fetch sensor data (for simplicity, using mock data here)
    int lightLevel = analogRead(lightPin);
    int temperature = dht.readTemperature();
    int humidity = dht.readHumidity();

    // Loop through sensor data and apply control logic
    for (JsonObject sensor : jsonDoc.as<JsonArray>()) {
      const char* sensorName = sensor["sensor_name"];
      int minValue = sensor["min_value"];
      int maxValue = sensor["max_value"];

      if (strcmp(sensorName, "C_Light") == 0) {
        if (lightLevel < minValue) {
          digitalWrite(C_lightPin, HIGH);  // Turn on light
        } else if (lightLevel > maxValue) {
          digitalWrite(C_lightPin, LOW);  // Turn off light
        }
      } else if (strcmp(sensorName, "C_Temp") == 0) {
        if (temperature < minValue) {
          digitalWrite(C_pumpPin, HIGH);  // Turn on pump
        } else if (temperature > maxValue) {
          digitalWrite(C_pumpPin, LOW);  // Turn off pump
        }
      }
    }

    Serial.println("C Auto Mode: Controls updated based on sensor readings.");
  } else {
    Serial.println("Error in fetching sensor triggers for C Auto Mode.");
  }

  sendControlStatus();
}

void sendControlStatus() {
  // Create a JSON object
  DynamicJsonDocument jsonDoc(512);

  // Collect status of each control
  jsonDoc["Pump_f1"] = digitalRead(pumpF1Pin);
  jsonDoc["Pump_f2"] = digitalRead(pumpF2Pin);
  // jsonDoc["Pump_f3"] = digitalRead(pumpF3Pin);
  jsonDoc["Pump_Pond"] = digitalRead(pumpPondPin);
  jsonDoc["C_Light"] = digitalRead(C_lightPin);
  jsonDoc["C_Fan"] = digitalRead(C_fanPin);
  // jsonDoc["C_Pump"] = digitalRead(C_pumpPin);
  // jsonDoc["C_Gate"] = digitalRead(C_gatePin);

  // Convert JSON object to string
  String jsonString;
  serializeJson(jsonDoc, jsonString);

  // Send data to server
  HTTPClient http;
  http.begin(controlUpdateUrl);
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(jsonString);
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println("Control status sent, response: ");
    Serial.print(response);

    lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(response);
  } else {
    // Serial.printf("Failed to send control status, error: %s\n", http.errorToString(httpResponseCode).c_str());

    
  }
}
